#!/usr/bin/env bash
###############################################################################
# Configuration File: homebrew-scripts.conf
# Description: ðŸ”§ Configuration settings for Homebrew automation scripts
# Version: 2.0.0
# 
# EDUCATIONAL PURPOSE:
# This configuration file demonstrates how to externalize script settings,
# making scripts more maintainable and user-friendly. Users can customize
# these settings without modifying the actual script code.
#
# USAGE:
# 1. Copy this file to your desired location
# 2. Customize the values below for your environment
# 3. The scripts will automatically source this configuration
#
# LEARNING OBJECTIVES:
# - Understand configuration file patterns in shell scripting
# - Learn about environment variable management
# - See examples of input validation and default values
# - Practice with associative arrays and configuration parsing
###############################################################################

# =============================================================================
# NETWORK CONFIGURATION
# =============================================================================
# Configure network requirements for automatic updates
# EDUCATIONAL NOTE: This shows how to make network-dependent scripts flexible

# WiFi Network Name (SSID) - Set to your preferred network
# Leave empty ("") to skip WiFi checking entirely
# Example: "MyHomeWiFi" or "OfficeNetwork"
WIFI_NETWORK=""

# Alternative: Use multiple allowed networks (space-separated)
# ALLOWED_NETWORKS="HomeWiFi OfficeWiFi GuestNetwork"
ALLOWED_NETWORKS=""

# Network interface to check (usually en0 for WiFi)
# Advanced users can change this for different network interfaces
NETWORK_INTERFACE="en0"

# =============================================================================
# NOTIFICATION CONFIGURATION  
# =============================================================================
# Configure how you want to receive notifications about script execution

# Email Settings (for detailed reports)
# Set your email address for HTML reports with detailed logs
EMAIL_ADDRESS=""

# Email subject prefix (helps organize notifications)
EMAIL_SUBJECT_PREFIX="[Homebrew Scripts]"

# Phone Number (for quick text summaries via iMessage)
# Format: +1234567890 (include country code)
PHONE_NUMBER=""

# Notification preferences
ENABLE_EMAIL_NOTIFICATIONS=true
ENABLE_TEXT_NOTIFICATIONS=true
ENABLE_DESKTOP_NOTIFICATIONS=true

# =============================================================================
# POWER MANAGEMENT
# =============================================================================
# Configure power requirements for automatic operations

# Require AC power for automatic updates (recommended for safety)
REQUIRE_AC_POWER=true

# Minimum battery percentage if running on battery (0-100)
# Only used if REQUIRE_AC_POWER=false
MIN_BATTERY_PERCENTAGE=50

# =============================================================================
# APPLICATION CONFIGURATION
# =============================================================================
# Customize which applications to install
# EDUCATIONAL NOTE: This demonstrates associative arrays in bash

# Enable/disable application categories
INSTALL_DEVELOPMENT_TOOLS=true
INSTALL_PRODUCTIVITY_APPS=true
INSTALL_CREATIVE_APPS=false
INSTALL_COMMUNICATION_APPS=true
INSTALL_UTILITIES=true

# Custom application list (cask-name:display-name:category)
# Users can add their own applications here
# Format: "cask-name:Display Name:category"
declare -A CUSTOM_APPS=(
    # Development Tools
    ["visual-studio-code"]="Visual Studio Code:development"
    ["iterm2"]="iTerm2:development"
    ["docker"]="Docker Desktop:development"
    
    # Productivity
    ["notion"]="Notion:productivity"
    ["obsidian"]="Obsidian:productivity"
    ["alfred"]="Alfred:productivity"
    
    # Creative (examples - disabled by default)
    ["figma"]="Figma:creative"
    ["adobe-creative-cloud"]="Adobe Creative Cloud:creative"
    
    # Communication
    ["slack"]="Slack:communication"
    ["discord"]="Discord:communication"
    ["zoom"]="Zoom:communication"
    
    # Utilities
    ["the-unarchiver"]="The Unarchiver:utilities"
    ["appcleaner"]="AppCleaner:utilities"
    ["rectangle"]="Rectangle:utilities"
)

# Applications that self-update (will be pinned to avoid Homebrew conflicts)
SELF_UPDATING_APPS=(
    "visual-studio-code"
    "docker"
    "slack"
    "discord"
    "zoom"
)

# =============================================================================
# SCHEDULING CONFIGURATION
# =============================================================================
# Configure when automatic updates should run

# Default schedule (daily, weekly, manual)
DEFAULT_SCHEDULE="weekly"

# Custom schedule times (24-hour format)
DAILY_UPDATE_HOUR=2
DAILY_UPDATE_MINUTE=0

# Weekly update day (0=Sunday, 1=Monday, ..., 6=Saturday)
WEEKLY_UPDATE_DAY=0
WEEKLY_UPDATE_HOUR=2
WEEKLY_UPDATE_MINUTE=0

# =============================================================================
# RETRY AND TIMEOUT CONFIGURATION
# =============================================================================
# Configure how scripts handle failures and retries

# Maximum number of retry attempts for failed operations
MAX_RETRIES=3

# Delay between retry attempts (in seconds)
RETRY_DELAY=300  # 5 minutes

# Network timeout for downloads (in seconds)
NETWORK_TIMEOUT=30

# Maximum time to wait for user input (in seconds, 0 = no timeout)
INPUT_TIMEOUT=0

# =============================================================================
# LOGGING CONFIGURATION
# =============================================================================
# Configure how scripts log their operations

# Log directory (relative to user's home directory)
LOG_DIR="Library/Logs"

# Log file names (will be created in LOG_DIR)
MAIN_LOG_FILE="HomebrewScripts.log"
SETUP_LOG_FILE="HomebrewSetup.log"
UPDATE_LOG_FILE="HomebrewUpdate.log"
CLEANUP_LOG_FILE="HomebrewCleanup.log"

# Log level (DEBUG, INFO, WARNING, ERROR)
LOG_LEVEL="INFO"

# Keep log files for this many days
LOG_RETENTION_DAYS=30

# Maximum log file size in MB (0 = no limit)
MAX_LOG_SIZE_MB=10

# =============================================================================
# ADVANCED CONFIGURATION
# =============================================================================
# Advanced settings for experienced users

# Homebrew installation prefix (auto-detected by default)
# Leave empty for automatic detection based on architecture
HOMEBREW_PREFIX=""

# Custom Homebrew repository URL (for advanced users)
HOMEBREW_REPO_URL=""

# Enable debug mode (more verbose output)
DEBUG_MODE=false

# Dry run mode (show what would be done without actually doing it)
DRY_RUN_MODE=false

# Skip confirmation prompts in interactive mode
SKIP_CONFIRMATIONS=false

# Custom shell profiles to update (space-separated)
# Default: ".zshrc .zprofile .bash_profile .bashrc"
SHELL_PROFILES=""

# =============================================================================
# VALIDATION FUNCTIONS
# =============================================================================
# These functions validate the configuration (educational examples)

# Validate email address format
validate_email() {
    local email="$1"
    if [[ -n "$email" && ! "$email" =~ ^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$ ]]; then
        echo "ERROR: Invalid email format: $email" >&2
        return 1
    fi
    return 0
}

# Validate phone number format
validate_phone() {
    local phone="$1"
    if [[ -n "$phone" && ! "$phone" =~ ^\+[0-9]{10,15}$ ]]; then
        echo "ERROR: Invalid phone format: $phone (use +1234567890)" >&2
        return 1
    fi
    return 0
}

# Validate percentage values
validate_percentage() {
    local value="$1"
    local name="$2"
    if [[ ! "$value" =~ ^[0-9]+$ ]] || [ "$value" -lt 0 ] || [ "$value" -gt 100 ]; then
        echo "ERROR: $name must be a number between 0 and 100: $value" >&2
        return 1
    fi
    return 0
}

# =============================================================================
# CONFIGURATION VALIDATION
# =============================================================================
# Automatically validate configuration when this file is sourced

validate_config() {
    local errors=0
    
    # Validate email if provided
    if ! validate_email "$EMAIL_ADDRESS"; then
        ((errors++))
    fi
    
    # Validate phone if provided
    if ! validate_phone "$PHONE_NUMBER"; then
        ((errors++))
    fi
    
    # Validate battery percentage
    if ! validate_percentage "$MIN_BATTERY_PERCENTAGE" "MIN_BATTERY_PERCENTAGE"; then
        ((errors++))
    fi
    
    # Validate retry settings
    if [[ ! "$MAX_RETRIES" =~ ^[0-9]+$ ]] || [ "$MAX_RETRIES" -lt 0 ]; then
        echo "ERROR: MAX_RETRIES must be a non-negative number: $MAX_RETRIES" >&2
        ((errors++))
    fi
    
    if [[ ! "$RETRY_DELAY" =~ ^[0-9]+$ ]] || [ "$RETRY_DELAY" -lt 0 ]; then
        echo "ERROR: RETRY_DELAY must be a non-negative number: $RETRY_DELAY" >&2
        ((errors++))
    fi
    
    # Validate schedule
    if [[ "$DEFAULT_SCHEDULE" != "daily" && "$DEFAULT_SCHEDULE" != "weekly" && "$DEFAULT_SCHEDULE" != "manual" ]]; then
        echo "ERROR: DEFAULT_SCHEDULE must be 'daily', 'weekly', or 'manual': $DEFAULT_SCHEDULE" >&2
        ((errors++))
    fi
    
    return $errors
}

# Run validation when configuration is loaded
if [[ "${BASH_SOURCE[0]}" != "${0}" ]]; then
    # File is being sourced, run validation
    if ! validate_config; then
        echo "Configuration validation failed. Please check your settings." >&2
        return 1 2>/dev/null || exit 1
    fi
fi

# =============================================================================
# HELPER FUNCTIONS
# =============================================================================
# Utility functions for working with this configuration

# Get applications by category
get_apps_by_category() {
    local category="$1"
    local apps=()
    
    for app in "${!CUSTOM_APPS[@]}"; do
        local app_info="${CUSTOM_APPS[$app]}"
        local app_category="${app_info##*:}"
        
        if [[ "$app_category" == "$category" ]]; then
            apps+=("$app")
        fi
    done
    
    printf '%s\n' "${apps[@]}"
}

# Check if category is enabled
is_category_enabled() {
    local category="$1"
    
    case "$category" in
        "development") [[ "$INSTALL_DEVELOPMENT_TOOLS" == "true" ]] ;;
        "productivity") [[ "$INSTALL_PRODUCTIVITY_APPS" == "true" ]] ;;
        "creative") [[ "$INSTALL_CREATIVE_APPS" == "true" ]] ;;
        "communication") [[ "$INSTALL_COMMUNICATION_APPS" == "true" ]] ;;
        "utilities") [[ "$INSTALL_UTILITIES" == "true" ]] ;;
        *) false ;;
    esac
}

# Print configuration summary
print_config_summary() {
    echo "Configuration Summary:"
    echo "====================="
    echo "WiFi Network: ${WIFI_NETWORK:-"Any network"}"
    echo "Email: ${EMAIL_ADDRESS:-"Not configured"}"
    echo "Phone: ${PHONE_NUMBER:-"Not configured"}"
    echo "Schedule: $DEFAULT_SCHEDULE"
    echo "Require AC Power: $REQUIRE_AC_POWER"
    echo "Max Retries: $MAX_RETRIES"
    echo "Debug Mode: $DEBUG_MODE"
    echo "Dry Run Mode: $DRY_RUN_MODE"
    echo ""
}

###############################################################################
# END OF CONFIGURATION FILE
###############################################################################
